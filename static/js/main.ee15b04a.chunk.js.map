{"version":3,"sources":["components/display.js","App.js","index.js"],"names":["Display","weatherData","search","setSearch","handleSearch","conditionsList","id","style","marginTop","marginLeft","type","placeholder","value","onChange","e","currentTarget","toLowerCase","onClick","map","data","className","Math","random","height","width","borderRadius","src","alt","App","useState","setData","city","setCity","trim","useEffect","fetch","then","ok","alert","Error","json","res","DataObj","country","location","name","temperature","current","temp_c","humidity","precip","precip_mm","description","condition","text","icon","catch","err","Fragment","path","render","from","to","ReactDOM","StrictMode","document","getElementById"],"mappings":"yMA+BeA,EA7BC,SAAC,GAAgE,IAA/DC,EAA8D,EAA9DA,YAAYC,EAAkD,EAAlDA,OAAOC,EAA2C,EAA3CA,UAAUC,EAAiC,EAAjCA,aAAaC,EAAoB,EAApBA,eACxD,OACI,sBAAMC,GAAG,aAAT,SAEF,sBAAKA,GAAG,MAAR,UACE,gCACE,6CACD,sBAAKC,MAAO,CAACC,UAAU,OAAOC,WAAW,QAAzC,UACE,uBAAOC,KAAK,OAAOC,YAAY,QAAQC,MAAOV,EAAQW,SAAU,SAACC,GAAD,OAAKX,EAAUW,EAAEC,cAAcH,MAAMI,kBACrG,wBAAQC,QAASb,EAAjB,0BAGJ,qBAAKE,GAAG,UAAR,SACID,EAAea,KAAI,SAACC,GACpB,MACU,SAAPA,EAAe,qBAAwBC,UAAU,UAAlC,UAA6CD,EAA7C,KAAqDlB,EAAYkB,KAAxDE,KAAKC,UAA+D,qBAAwBF,UAAU,UAAlC,kBAAiD,qBAAKb,MAAO,CAACgB,OAAO,OAAOC,MAAM,OAAOC,aAAa,OAAQC,IAAKzB,EAAYkB,GAAOQ,IAAI,OAAjIN,KAAKC,qBCiDzGM,EA/DH,WAAO,IAAD,EAEWC,mBAAS,IAFpB,mBAEV5B,EAFU,KAEE6B,EAFF,OAGID,mBAAS,gBAHb,mBAGVE,EAHU,KAGLC,EAHK,OAIQH,mBAAS,IAJjB,mBAIV3B,EAJU,KAIHC,EAJG,OAKM0B,mBAAS,CAAC,UAAU,OAAO,cAAc,WAAW,SAAS,cAAc,SAA3FxB,EALU,oBA2ChB,SAASD,IAGP4B,EAAQ9B,EAAO+B,QAKjB,OAzCAC,qBAAU,WACRC,MAAM,oFAAD,OAAqFJ,IACzFK,MAAK,SAACjB,GACL,IAAa,IAAVA,EAAKkB,GAEN,MADAC,MAAM,mBACAC,MAEH,OAAOpB,EAAKqB,UAGlBJ,MAAK,SAACK,GAEL,IAAMC,EAAQ,CACbC,QAAQF,EAAIG,SAASD,QACrBZ,KAAKU,EAAIG,SAASC,KAClBC,YAAYL,EAAIM,QAAQC,OAAO,SAC/BC,SAASR,EAAIM,QAAQE,SAAS,IAC9BC,OAAOT,EAAIM,QAAQI,UAAU,MAC7BC,YAAYX,EAAIM,QAAQM,UAAUC,KAClCC,KAAKd,EAAIM,QAAQM,UAAUE,MAG5BzB,EAAQY,MAETc,OAAM,SAACC,GAAD,OAAOnB,MAAM,0BAEpB,CAACP,IAgBH,cAAC,IAAM2B,SAAP,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,eAAeC,OAAQ,kBAAI,cAAC,EAAD,CAAS3D,YAAaA,EAAaC,OAAQA,EAAQE,aAAcA,EAAcD,UAAWA,EAAWE,eAAgBA,OAC5J,cAAC,IAAD,CAAUwD,KAAK,IAAIC,GAAG,yB,MCpD9BC,IAASH,OACP,cAAC,IAAMI,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ee15b04a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Display = ({weatherData,search,setSearch,handleSearch,conditionsList}) => {\r\n    return ( \r\n        <main id=\"contenedor\">\r\n      \r\n      <div id=\"row\">\r\n        <nav>\r\n          <h2>Weather App</h2>\r\n         <div style={{marginTop:\"10px\",marginLeft:\"10px\"}}>\r\n           <input type=\"text\" placeholder=\"City?\" value={search} onChange={(e)=>setSearch(e.currentTarget.value.toLowerCase())}/>\r\n           <button onClick={handleSearch}>Search</button>\r\n         </div>\r\n        </nav>\r\n       <div id=\"display\">\r\n         { conditionsList.map((data)=>{\r\n           return(\r\n             (data!==\"icon\")?<ul key={Math.random()} className=\"columns\">{data}: {weatherData[data]}</ul>:<ul key={Math.random()} className=\"columns\">Sky: <img style={{height:\"40px\",width:\"40px\",borderRadius:\"50%\"}} src={weatherData[data]} alt=\"\"></img></ul>\r\n               \r\n               \r\n            \r\n           )\r\n         })}\r\n         \r\n       </div>\r\n     </div> \r\n     \r\n   </main>\r\n     );\r\n}\r\n \r\nexport default Display;","import React, { useEffect, useState } from 'react';\nimport {BrowserRouter,Route,Switch,Redirect} from 'react-router-dom';\nimport Display from \"./components/display\"\nconst App = () => {\n\n  const[weatherData,setData]=useState([])\n  const[city,setCity]=useState(\"buenos aires\")\n  const[search,setSearch]=useState(\"\")\n  const[conditionsList]=useState([\"country\",\"city\",\"temperature\",\"humidity\",\"precip\",\"description\",\"icon\"])\n  \n  \n  \n\n  useEffect(()=>{\n    fetch(`https://api.weatherapi.com/v1/current.json?key=09a06f47eae04f47979170240201512&q=${city}`)\n    .then((data)=>{\n      if(data.ok===false){\n        alert(\"error en la url\")\n        throw Error\n      }\n      else return data.json()\n    \n    })\n    .then((res)=>{\n      \n      const DataObj={\n       country:res.location.country,\n       city:res.location.name,\n       temperature:res.current.temp_c+\" Â°C\",\n       humidity:res.current.humidity+\"%\",\n       precip:res.current.precip_mm+\" mm\",\n       description:res.current.condition.text,\n       icon:res.current.condition.icon\n      }\n      \n      setData(DataObj)\n    })\n    .catch((err)=>alert(\"error de conexion\"))\n\n  },[city])\n\n\n\n\n\n\n  function handleSearch(){\n\n    \n    setCity(search.trim())\n    \n  }\n\n\n  return ( \n  <React.Fragment>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/weatherHome\" render={()=><Display weatherData={weatherData} search={search} handleSearch={handleSearch} setSearch={setSearch} conditionsList={conditionsList}/>}/>\n        <Redirect from=\"/\" to=\"/weatherHome\"/>\n      </Switch>\n    </BrowserRouter>\n  </React.Fragment>\n   );\n}\n \nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport App from './App';\nimport \"./index.css\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}