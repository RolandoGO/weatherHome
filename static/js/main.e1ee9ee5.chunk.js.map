{"version":3,"sources":["components/display.js","App.js","index.js"],"names":["Display","weatherData","search","setSearch","handleSearch","conditionsList","id","style","marginTop","type","placeholder","value","onChange","e","currentTarget","toLowerCase","onClick","map","data","className","height","width","borderRadius","src","alt","App","useState","setData","city","setCity","trim","useEffect","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","fetch","then","ok","alert","Error","json","res","location","name","catch","err","DataObj","country","temperature","current","humidity","precip","description","weather_descriptions","icon","weather_icons","Fragment","path","render","from","to","ReactDOM","StrictMode","document","getElementById"],"mappings":"yMA+BeA,EA7BC,SAAC,GAAgE,IAA/DC,EAA8D,EAA9DA,YAAYC,EAAkD,EAAlDA,OAAOC,EAA2C,EAA3CA,UAAUC,EAAiC,EAAjCA,aAAaC,EAAoB,EAApBA,eACxD,OACI,sBAAMC,GAAG,aAAT,SAEF,sBAAKA,GAAG,MAAR,UACE,gCACE,6CACD,sBAAKC,MAAO,CAACC,UAAU,QAAvB,UACE,uBAAOC,KAAK,OAAOC,YAAY,QAAQC,MAAOT,EAAQU,SAAU,SAACC,GAAD,OAAKV,EAAUU,EAAEC,cAAcH,MAAMI,kBACrG,wBAAQC,QAASZ,EAAjB,0BAGJ,qBAAKE,GAAG,UAAR,SACID,EAAeY,KAAI,SAACC,GACpB,MACU,SAAPA,EAAe,qBAAIC,UAAU,UAAd,UAAyBD,EAAzB,KAAiCjB,EAAYiB,MAAY,qBAAIC,UAAU,UAAd,kBAA6B,qBAAKZ,MAAO,CAACa,OAAO,OAAOC,MAAM,OAAOC,aAAa,OAAQC,IAAKtB,EAAYiB,GAAOM,IAAI,mBCoE7LC,EAlFH,WAAO,IAAD,EAEWC,mBAAS,IAFpB,mBAEVzB,EAFU,KAEE0B,EAFF,OAGID,mBAAS,gBAHb,mBAGVE,EAHU,KAGLC,EAHK,OAIQH,mBAAS,IAJjB,mBAIVxB,EAJU,KAIHC,EAJG,OAKMuB,mBAAS,CAAC,UAAU,OAAO,cAAc,WAAW,SAAS,cAAc,SAA3FrB,EALU,oBAgEhB,SAASD,IACPyB,EAAQ3B,EAAO4B,OAAOf,eAKxB,OA9DAgB,qBAAU,WAELC,UAAUC,YACXD,UAAUC,YAAYC,oBAAmB,SAACC,GACxC,IAAMC,EAASD,EAAOA,OAAOC,SACvBC,EAAUF,EAAOA,OAAOE,UAC9BC,MAAM,yFAAD,OAA0FF,EAA1F,YAAsGC,IAC1GE,MAAK,SAACrB,GACL,IAAa,IAAVA,EAAKsB,GAEN,MADAC,MAAM,mBACAC,MAEH,OAAOxB,EAAKyB,UAGlBJ,MAAK,SAACK,GAAD,OAAOf,EAAQe,EAAIC,SAASC,SAAOC,OAAM,SAACC,GAAD,OAAOP,MAAM,2BAE3DA,MAAM,4BAIX,IAGFV,qBAAU,WACRO,MAAM,yFAAD,OAA0FV,IAC9FW,MAAK,SAACrB,GACL,IAAa,IAAVA,EAAKsB,GAEN,MADAC,MAAM,mBACAC,MAEH,OAAOxB,EAAKyB,UAGlBJ,MAAK,SAACK,GAEL,IAAMK,EAAQ,CACZrB,KAAKgB,EAAIC,SAASC,KAClBI,QAAQN,EAAIC,SAASK,QACrBC,YAAYP,EAAIQ,QAAQD,YACxBE,SAAST,EAAIQ,QAAQC,SACrBC,OAAOV,EAAIQ,QAAQE,OACnBC,YAAYX,EAAIQ,QAAQI,qBAAqB,GAC7CC,KAAKb,EAAIQ,QAAQM,cAAc,IAEjC/B,EAAQsB,MAETF,OAAM,SAACC,GAAD,OAAOP,MAAM,0BAEpB,CAACb,IAcH,cAAC,IAAM+B,SAAP,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,eAAeC,OAAQ,kBAAI,cAAC,EAAD,CAAS5D,YAAaA,EAAaC,OAAQA,EAAQE,aAAcA,EAAcD,UAAWA,EAAWE,eAAgBA,OAC5J,cAAC,IAAD,CAAUyD,KAAK,IAAIC,GAAG,yB,MCvE9BC,IAASH,OACP,cAAC,IAAMI,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e1ee9ee5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Display = ({weatherData,search,setSearch,handleSearch,conditionsList}) => {\r\n    return ( \r\n        <main id=\"contenedor\">\r\n      \r\n      <div id=\"row\">\r\n        <nav>\r\n          <h2>Weather App</h2>\r\n         <div style={{marginTop:\"10px\"}}>\r\n           <input type=\"text\" placeholder=\"City?\" value={search} onChange={(e)=>setSearch(e.currentTarget.value.toLowerCase())}/>\r\n           <button onClick={handleSearch}>Search</button>\r\n         </div>\r\n        </nav>\r\n       <div id=\"display\">\r\n         { conditionsList.map((data)=>{\r\n           return(\r\n             (data!==\"icon\")?<ul className=\"columns\">{data}: {weatherData[data]}</ul>:<ul className=\"columns\">Sky: <img style={{height:\"40px\",width:\"40px\",borderRadius:\"50%\"}} src={weatherData[data]} alt=\"\"></img></ul>\r\n               \r\n               \r\n            \r\n           )\r\n         })}\r\n         \r\n       </div>\r\n     </div> \r\n     \r\n   </main>\r\n     );\r\n}\r\n \r\nexport default Display;","import React, { useEffect, useState } from 'react';\nimport {BrowserRouter,Route,Switch,Redirect} from 'react-router-dom';\nimport Display from \"./components/display\"\nconst App = () => {\n\n  const[weatherData,setData]=useState([])\n  const[city,setCity]=useState(\"buenos aires\")\n  const[search,setSearch]=useState(\"\")\n  const[conditionsList]=useState([\"country\",\"city\",\"temperature\",\"humidity\",\"precip\",\"description\",\"icon\"])\n  \n\n  useEffect(()=>{\n\n    if(navigator.geolocation){\n      navigator.geolocation.getCurrentPosition((coords)=>{\n        const latitude=coords.coords.latitude\n        const longitude=coords.coords.longitude\n        fetch(`http://api.weatherstack.com/current?access_key=586835d1a366812b7a6c4aa7b6de457c&query=${latitude},${longitude}`)\n        .then((data)=>{\n          if(data.ok===false){\n            alert(\"error en la url\")\n            throw Error\n          }\n          else return data.json()\n        \n        })\n        .then((res)=>setCity(res.location.name)).catch((err)=>alert(\"error de conexion\"))\n    })}\n    else alert(\"No hay geolocalizacion\")\n    \n        \n    \n  },[])\n\n\n  useEffect(()=>{\n    fetch(`http://api.weatherstack.com/current?access_key=586835d1a366812b7a6c4aa7b6de457c&query=${city}`)\n    .then((data)=>{\n      if(data.ok===false){\n        alert(\"error en la url\")\n        throw Error\n      }\n      else return data.json()\n    \n    })\n    .then((res)=>{\n      \n      const DataObj={\n        city:res.location.name,\n        country:res.location.country,\n        temperature:res.current.temperature,\n        humidity:res.current.humidity,\n        precip:res.current.precip,\n        description:res.current.weather_descriptions[0],\n        icon:res.current.weather_icons[0]\n      }\n      setData(DataObj)\n    })\n    .catch((err)=>alert(\"error de conexion\"))\n\n  },[city])\n\n\n\n\n\n\n  function handleSearch(){\n    setCity(search.trim().toLowerCase())\n    \n  }\n\n\n  return ( \n  <React.Fragment>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/weatherHome\" render={()=><Display weatherData={weatherData} search={search} handleSearch={handleSearch} setSearch={setSearch} conditionsList={conditionsList}/>}/>\n        <Redirect from=\"/\" to=\"/weatherHome\"/>\n      </Switch>\n    </BrowserRouter>\n  </React.Fragment>\n   );\n}\n \nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport App from './App';\nimport \"./index.css\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}